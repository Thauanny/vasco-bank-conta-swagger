/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.44).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Cheque;
import io.swagger.model.Cheques;
import io.swagger.model.ContaCorrente;
import io.swagger.model.ContaCorrenteCriar;
import io.swagger.model.Extrato;
import io.swagger.model.Saldo;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import javax.validation.Valid;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2023-05-29T18:04:14.979160323Z[GMT]")
@Validated
public interface ContaCorrenteApi {

    @Operation(summary = "Retorna os juros do cheque da conta", description = "Place a new order in the store", tags={ "contaCorrente" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Saldo.class))),
        
        @ApiResponse(responseCode = "405", description = "Invalid input") })
    @RequestMapping(value = "/contaCorrente/cheque/{idConta}/{idCheque}/juros",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Saldo> chequejuros(@Parameter(in = ParameterIn.PATH, description = "ID do usuario", required=true, schema=@Schema()) @PathVariable("idCheque") Long idCheque, @Parameter(in = ParameterIn.PATH, description = "ID do usuario", required=true, schema=@Schema()) @PathVariable("idConta") Long idConta);


    @Operation(summary = "Atualiza o limite do cheque da conta", description = "Place a new order in the store", tags={ "contaCorrente" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Cheque.class))),
        
        @ApiResponse(responseCode = "405", description = "Invalid input") })
    @RequestMapping(value = "/contaCorrente/cheque/{idConta}/{idCheque}/limite",
        produces = { "application/json" }, 
        consumes = { "application/json", "application/xml", "application/x-www-form-urlencoded" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Cheque> chequepust(@Parameter(in = ParameterIn.PATH, description = "ID do usuario", required=true, schema=@Schema()) @PathVariable("idCheque") Long idCheque, @Parameter(in = ParameterIn.PATH, description = "ID do usuario", required=true, schema=@Schema()) @PathVariable("idConta") Long idConta, @Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody Cheque body);


    @Operation(summary = "Atualiza os juros do cheque da conta", description = "Place a new order in the store", tags={ "contaCorrente" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Saldo.class))),
        
        @ApiResponse(responseCode = "405", description = "Invalid input") })
    @RequestMapping(value = "/contaCorrente/cheque/{idConta}/{idCheque}/juros",
        produces = { "application/json" }, 
        consumes = { "application/json", "application/xml", "application/x-www-form-urlencoded" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Saldo> chequeput(@Parameter(in = ParameterIn.PATH, description = "ID do usuario", required=true, schema=@Schema()) @PathVariable("idCheque") Long idCheque, @Parameter(in = ParameterIn.PATH, description = "ID do usuario", required=true, schema=@Schema()) @PathVariable("idConta") Long idConta, @Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody Saldo body);


    @Operation(summary = "Retorna o cheque da conta", description = "Returns um map da conta corrente do usuario", security = {
        @SecurityRequirement(name = "api_key")    }, tags={ "contaCorrente" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Cheque.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
        
        @ApiResponse(responseCode = "404", description = "conta not found") })
    @RequestMapping(value = "/contaCorrente/cheque/{idConta}/{idCheque}",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<Cheque> getCheque(@Parameter(in = ParameterIn.PATH, description = "ID do usuario", required=true, schema=@Schema()) @PathVariable("idConta") Long idConta, @Parameter(in = ParameterIn.PATH, description = "ID do usuario", required=true, schema=@Schema()) @PathVariable("idCheque") Long idCheque);


    @Operation(summary = "retorna o limite do cheque da conta", description = "Place a new order in the store", tags={ "contaCorrente" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Saldo.class))),
        
        @ApiResponse(responseCode = "405", description = "Invalid input") })
    @RequestMapping(value = "/contaCorrente/cheque/{idConta}/{idCheque}/limite",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Saldo> getChequeLimite(@Parameter(in = ParameterIn.PATH, description = "ID do usuario", required=true, schema=@Schema()) @PathVariable("idCheque") Long idCheque, @Parameter(in = ParameterIn.PATH, description = "ID do usuario", required=true, schema=@Schema()) @PathVariable("idConta") Long idConta);


    @Operation(summary = "Retorna todos os cheques da conta", description = "Returns um map da conta corrente do usuario", security = {
        @SecurityRequirement(name = "api_key")    }, tags={ "contaCorrente" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Cheques.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
        
        @ApiResponse(responseCode = "404", description = "conta not found") })
    @RequestMapping(value = "/contaCorrente/cheque/all/{idConta}",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<Cheques> getCheques(@Parameter(in = ParameterIn.PATH, description = "ID do usuario", required=true, schema=@Schema()) @PathVariable("idConta") Long idConta);


    @Operation(summary = "Retorna a conta corrente do usuario", description = "Returns um map da conta corrente do usuario", security = {
        @SecurityRequirement(name = "api_key")    }, tags={ "contaCorrente" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ContaCorrente.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
        
        @ApiResponse(responseCode = "404", description = "conta not found") })
    @RequestMapping(value = "/contaCorrente/{idUser}",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<ContaCorrente> getContaCorrentById(@Parameter(in = ParameterIn.PATH, description = "ID do usuario", required=true, schema=@Schema()) @PathVariable("idUser") Long idUser);


    @Operation(summary = "retorna o extrato da conta", description = "For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.", tags={ "contaCorrente" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Extrato.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
        
        @ApiResponse(responseCode = "404", description = "Order not found") })
    @RequestMapping(value = "/contaCorrente/extrato/{idConta}",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<Extrato> getOrderById(@Parameter(in = ParameterIn.PATH, description = "ID of order that needs to be fetched", required=true, schema=@Schema()) @PathVariable("idConta") Long idConta);


    @Operation(summary = "Retorna o saldo da conta", description = "Place a new order in the store", tags={ "contaCorrente" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Saldo.class))),
        
        @ApiResponse(responseCode = "405", description = "Invalid input") })
    @RequestMapping(value = "/contaCorrente/saldo/{idConta}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Saldo> getSaldo(@Parameter(in = ParameterIn.PATH, description = "ID do usuario", required=true, schema=@Schema()) @PathVariable("idConta") Long idConta);


    @Operation(summary = "Cria um cheque na conta", description = "Returns um map da conta corrente do usuario", security = {
        @SecurityRequirement(name = "api_key")    }, tags={ "contaCorrente" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ContaCorrente.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
        
        @ApiResponse(responseCode = "404", description = "conta not found") })
    @RequestMapping(value = "/contaCorrente/cheque/criar/{idConta}",
        produces = { "application/json", "application/xml" }, 
        consumes = { "application/json", "application/xml", "application/x-www-form-urlencoded" }, 
        method = RequestMethod.POST)
    ResponseEntity<ContaCorrente> postCheque(@Parameter(in = ParameterIn.PATH, description = "ID do usuario", required=true, schema=@Schema()) @PathVariable("idConta") Long idConta, @Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody Cheque body);


    @Operation(summary = "Criação da conta", description = "Returns um map da conta corrente do usuario", security = {
        @SecurityRequirement(name = "api_key")    }, tags={ "contaCorrente" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ContaCorrenteCriar.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
        
        @ApiResponse(responseCode = "404", description = "conta not found") })
    @RequestMapping(value = "/contaCorrente/criar/{idUser}",
        produces = { "application/json", "application/xml" }, 
        consumes = { "application/json", "application/xml", "application/x-www-form-urlencoded" }, 
        method = RequestMethod.POST)
    ResponseEntity<ContaCorrenteCriar> postContaCorrente(@Parameter(in = ParameterIn.PATH, description = "ID do usuario", required=true, schema=@Schema()) @PathVariable("idUser") Long idUser, @Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody ContaCorrenteCriar body);


    @Operation(summary = "Atualiza o saldo da conta", description = "Place a new order in the store", tags={ "contaCorrente" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Saldo.class))),
        
        @ApiResponse(responseCode = "405", description = "Invalid input") })
    @RequestMapping(value = "/contaCorrente/saldo/{idConta}",
        produces = { "application/json" }, 
        consumes = { "application/json", "application/xml", "application/x-www-form-urlencoded" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Saldo> putSaldosaldo(@Parameter(in = ParameterIn.PATH, description = "ID do usuario", required=true, schema=@Schema()) @PathVariable("idConta") Long idConta, @Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody Saldo body);

}

